[tool.ruff]
target-version = 'py38'

extend-exclude = ['tests']
src = ['lmo']

format = 'grouped'
ignore = [
    'A001', # Variable {name} is shadowing a Python builtin
    'A002', # Argument {name} is shadowing a Python builtin
    'A003', # Class attribute {name} is shadowing a Python builtin
    'B023', # function-uses-loop-variable
    'B024', # `FormatWidgetMixin` is an abstract base class, but it has no abstract methods
    'D205', # blank-line-after-summary
    'D212', # multi-line-summary-first-line
    'RET505', # Unnecessary `else` after `return` statement
    'TRY003', # Avoid specifying long messages outside the exception class
    'RET507', # Unnecessary `elif` after `continue` statement
    'C405', # Unnecessary {obj_type} literal (rewrite as a set literal)
    'C406', # Unnecessary {obj_type} literal (rewrite as a dict literal)
    'C408', # Unnecessary {obj_type} call (rewrite as a literal)
    'SIM114', # Combine `if` branches using logical `or` operator
    'RET506', # Unnecessary `else` after `raise` statement
]
line-length = 80
select = [
    'A', # flake8-builtins
    'ASYNC', # flake8 async checker
    'B', # flake8-bugbear
    'C4', # flake8-comprehensions
    'C90', # mccabe
    'COM', # flake8-commas

    ## Require docstrings for all public methods, would be good to enable at some point
    # 'D',     # pydocstyle

    'E', # pycodestyle error ('W' for warning)
    'F', # pyflakes
    'FA', # flake8-future-annotations
    'I', # isort
    'ICN', # flake8-import-conventions
    'INP', # flake8-no-pep420
    'ISC', # flake8-implicit-str-concat
    'N', # pep8-naming
    'NPY', # NumPy-specific rules
    'PERF', # perflint,
    'PIE', # flake8-pie
    'Q', # flake8-quotes

    'RET', # flake8-return
    'RUF', # Ruff-specific rules
    'SIM', # flake8-simplify
    'T20', # flake8-print
    'TD', # flake8-todos
    'TRY', # tryceratops
    'UP', # pyupgrade
]

[tool.ruff.pydocstyle]
convention = 'google'
ignore-decorators = ['typing.overload']

[tool.ruff.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.flake8-quotes]
docstring-quotes = 'single'
inline-quotes = 'single'
multiline-quotes = 'single'

[project]
authors = [{ name = 'Rick van Hattem (Wolph)', email = 'wolph@wol.ph' }]
dynamic = ['version']
keywords = [
    'REPL',
    'animated',
    'bar',
    'color',
    'console',
    'duration',
    'efficient',
    'elapsed',
    'eta',
    'feedback',
    'live',
    'meter',
    'monitor',
    'monitoring',
    'multi-threaded',
    'progress',
    'progress-bar',
    'progressbar',
    'progressmeter',
    'python',
    'rate',
    'simple',
    'speed',
    'spinner',
    'stats',
    'terminal',
    'throughput',
    'time',
    'visual',
]
license = { text = 'BSD-3-Clause' }
name = 'progressbar2'
requires-python = '>=3.8'

classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Development Status :: 6 - Mature',
    'Environment :: Console',
    'Environment :: MacOS X',
    'Environment :: Other Environment',
    'Environment :: Win32 (MS Windows)',
    'Environment :: X11 Applications',
    'Framework :: IPython',
    'Framework :: Jupyter',
    'Intended Audience :: Developers',
    'Intended Audience :: Developers',
    'Intended Audience :: Education',
    'Intended Audience :: End Users/Desktop',
    'Intended Audience :: Other Audience',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: MacOS',
    'Operating System :: Microsoft :: MS-DOS',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: Microsoft',
    'Operating System :: POSIX :: BSD :: FreeBSD',
    'Operating System :: POSIX :: BSD',
    'Operating System :: POSIX :: Linux',
    'Operating System :: POSIX :: SunOS/Solaris',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: Implementation :: IronPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Programming Language :: Python :: Implementation',
    'Programming Language :: Python',
    'Programming Language :: Unix Shell',
    'Topic :: Desktop Environment',
    'Topic :: Education :: Computer Aided Instruction (CAI)',
    'Topic :: Education :: Testing',
    'Topic :: Office/Business',
    'Topic :: Other/Nonlisted Topic',
    'Topic :: Software Development :: Build Tools',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Pre-processors',
    'Topic :: Software Development :: User Interfaces',
    'Topic :: System :: Installation/Setup',
    'Topic :: System :: Logging',
    'Topic :: System :: Monitoring',
    'Topic :: System :: Shells',
    'Topic :: Terminals',
    'Topic :: Utilities',
]
description = 'A Python Progressbar library to provide visual (yet text based) progress to long running operations.'
readme = 'README.rst'

dependencies = ['python-utils >= 3.4.5']

[tool.setuptools.dynamic]
version = { attr = 'progressbar.__about__.__version__' }

[tool.setuptools.packages.find]
exclude = ['docs', 'tests']

[tool.setuptools]
include-package-data = true

[project.scripts]
cli-name = 'progressbar.cli:main'

[project.optional-dependencies]
docs = ['sphinx>=1.8.5']
tests = [
    'dill>=0.3.6',
    'flake8>=3.7.7',
    'freezegun>=0.3.11',
    'pytest-cov>=2.6.1',
    'pytest-mypy',
    'pytest>=4.6.9',
    'sphinx>=1.8.5',
]

[project.urls]
bugs = 'https://github.com/wolph/python-progressbar/issues'
documentation = 'https://progressbar-2.readthedocs.io/en/latest/'
repository = 'https://github.com/wolph/python-progressbar/'

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools', 'setuptools-scm', 'wheel']

[tool.codespell]
skip = '*/htmlcov,./docs/_build,*.asc'

ignore-words-list = 'datas'

[tool.black]
line-length = 79
skip-string-normalization = true
